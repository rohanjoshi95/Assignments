Learning Objectives:-
Create the `auth-svc` service
Create the `data-svc` service


Problem Statement:-
Your company has just deployed two components of a web application to a Kubernetes cluster, using deployments with multiple replicas. They need a way to provide dynamic network access to these replicas so that there will be uninterrupted access to the components whenever replicas are created, removed, and replaced. One deployment is called auth-deployment, an authentication provider that needs to be accessible from outside the cluster. The other is called data-deployment, and it is a component designed to be accessed only by other pods within the cluster.

The team wants you to create two services to expose these two components:-

auth-deployment.yaml
------------------------
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: auth-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP




data-deployment.yaml
-----------------------
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: data-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: data
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: data
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP


Examine the two deployments, and create two services that meet the following criteria:

auth-svc.yaml
--------------

The service name is auth-svc.
The service exposes the pod replicas managed by the deployment named auth-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is NodePort.


data-svc.yaml
----------------
The service name is data-svc.
The service exposes the pod replicas managed by the deployment named data-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is ClusterIP.

Note: All work should be done in the default namespace.


Answers-->


kubectl create -f auth-deployment.yaml
deployment.apps/auth-deployment created

kubectl create -f data-deployment.yaml
deployment.apps/data-deployment created

auth-svc.yml---->>

apiVersion: v1
kind: Service
metadata:
  name: auth-svc
  namespace: default
spec:
  type: NodePort
  selector:
    app: auth
  ports:
    - name: http
      port: 8080
      targetPort: 80
      protocol: TCP

data-svc.yml---->>

apiVersion: v1
kind: Service
metadata:
  name: data-svc
  namespace: default
spec:
  type: ClusterIP
  selector:
    app: data
  ports:
    - protocol: TCP
      port: 8080
      name: http

kubectl create -f auth-svc.yml
service/auth-svc created

kubectl create -f data-svc.yml
service/data-svc created

kubectl get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
auth-svc     NodePort    10.106.223.198   <none>        8080:31755/TCP   67s
data-svc     ClusterIP   10.98.26.220     <none>        8080/TCP         18s
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          4h59m

kubectl get pods
NAME                               READY   STATUS    RESTARTS   AGE
auth-deployment-6856f68998-tw8ll   1/1     Running   0          8m47s
auth-deployment-6856f68998-xwfzf   1/1     Running   0          8m47s
data-deployment-6cd87796bc-64dc4   1/1     Running   0          8m39s
data-deployment-6cd87796bc-c9f7m   1/1     Running   0          8m38s
data-deployment-6cd87796bc-rwl55   1/1     Running   0          8m38s






