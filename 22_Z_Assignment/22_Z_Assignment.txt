Learning Objectives:-
Create a PersistentVolume
Create a PersistentVolumeClaim
Create a MySQL Pod configured to use the PersistentVolumeClaim

Problem Statement:-
Your company needs a small database server to support a new application. They have asked you to deploy a pod running a MySQL container, but they want the data to persist even if the pod is deleted or replaced. Therefore, the MySQL database pod requires persistent storage.


You will need to do the following:-

1. Create a PersistentVolume:
	The PersistentVolume should be named mysql-pv.
	The volume needs a capacity of 1Gi.
	Use a storageClassName of localdisk.
	Use the accessMode ReadWriteOnce.
	Store the data locally on the node using a hostPath volume at the location /mnt/data.

2. Create a PersistentVolumeClaim:
	The PersistentVolumeClaim should be named mysql-pv-claim.
	Set a resource request on the claim for 500Mi of storage.
	Use the same storageClassName and accessModes as the PersistentVolume so that this claim can bind to the PersistentVolume.

3. Create a MySQL Pod configured to use the PersistentVolumeClaim:
	The Pod should be named mysql-pod.
	Use the image mysql:5.6.
	Expose the containerPort 3306.
	Set an environment variable called MYSQL_ROOT_PASSWORD with the value password.
	Add the PersistentVolumeClaim as a volume and mount it to the container at the path /var/lib/mysql.

Answers--->>

kubectl create -f mysql-pv.yml
persistentvolume/mysql-pv created

kubectl create -f mysql-pv-claim.yml
persistentvolumeclaim/mysql-pv-claim created

kubectl create -f db-pass.yml
secret/mysql-db-password created

kubectl create -f mysql-pod.yml
pod/mysql-pod created

kubectl get pods
NAME                               READY   STATUS    RESTARTS   AGE
mysql-pod                          1/1     Running   0          61s

>kubectl describe pod mysql-pod

Name:         mysql-pod
Namespace:    default
Priority:     0
Node:         minikube/192.168.99.100
Start Time:   Thu, 18 Jun 2020 08:56:19 -0700
Labels:       app=mysqlpod
Annotations:  <none>
Status:       Running
IP:           172.17.0.10
IPs:
  IP:  172.17.0.10
Containers:
  mysql-container:
    Container ID:   docker://117ff404dea63e075976496d5ea654e7ded916499672c83badfb33268d1555c6
    Image:          mysql:5.6
    Image ID:       docker-pullable://mysql@sha256:2bf1a0a05a6ad437dcac6689e48a9c33774ac92c6213fce2c4196343210592f3
    Port:           3306/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Thu, 18 Jun 2020 08:56:51 -0700
    Ready:          True
    Restart Count:  0
    Environment:
      MYSQL_ROOT_PASSWORD:  <set to the key 'mykey' in secret 'mysql-db-password'>  Optional: false
    Mounts:
      /var/lib/mysql from mysql-vol (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-58vnk (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  mysql-vol:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  mysql-pv-claim
    ReadOnly:   false
  default-token-58vnk:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-58vnk
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason     Age    From               Message
  ----    ------     ----   ----               -------
  Normal  Scheduled  5m16s  default-scheduler  Successfully assigned default/mysql-pod to minikube
  Normal  Pulling    5m15s  kubelet, minikube  Pulling image "mysql:5.6"
  Normal  Pulled     4m44s  kubelet, minikube  Successfully pulled image "mysql:5.6"
  Normal  Created    4m44s  kubelet, minikube  Created container mysql-container
  Normal  Started    4m44s  kubelet, minikube  Started container mysql-container